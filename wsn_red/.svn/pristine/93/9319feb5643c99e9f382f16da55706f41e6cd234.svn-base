package com.itheima.rbclient.ui.fragment;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ListView;

import com.android.volley.VolleyError;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.itheima.rbclient.App;
import com.itheima.rbclient.R;
import com.itheima.rbclient.RBConstants;
import com.itheima.rbclient.adapter.NewproductAdapter;
import com.itheima.rbclient.bean.LimitResponse;
import com.itheima.rbclient.ui.activity.AppDetailActivity;

import org.senydevpkg.net.HttpLoader;
import org.senydevpkg.net.HttpParams;
import org.senydevpkg.net.resp.IResponse;

import java.util.ArrayList;
import java.util.List;

import butterknife.ButterKnife;

/**
 * 新品上架
 */
public class HotproductFragment extends BaseFragment implements HttpLoader.HttpListener {

    ListView lvNewproductList;
    private List<LimitResponse.ProductListBean> productList;
    private NewproductAdapter adapter;

    protected PullToRefreshListView refreshListView;// 下拉刷新ListView

    @Override
    protected View createView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {

        refreshListView = (PullToRefreshListView) View.inflate(getActivity(),
                R.layout.newproduct_fragment, null);

        // 1.设置刷新模式
        setRefreshMode();
        // 2.设置刷新监听器
        refreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener<ListView>() {
            /**
             * 下拉刷新和上拉加载更多都会执行该方法，
             * @param refreshView
             */
            @Override
            public void onRefresh(PullToRefreshBase<ListView> refreshView) {
                size++;
                getConnection(size, 8);
            }
        });
        //3.获取PullToRefreshListView内部包裹的ListView
        lvNewproductList = refreshListView.getRefreshableView();
        setListView();

        return refreshListView;
    }

    protected void setRefreshMode() {
        refreshListView.setMode(PullToRefreshBase.Mode.PULL_FROM_END);// 设置既可以上拉
    }

    /**
     * 设置ListView的divider和selector
     */
    protected void setListView() {
        lvNewproductList.setDividerHeight(0);//去掉分割线
        lvNewproductList.setSelector(android.R.color.transparent);//将listveiw的selector设置为透明
    }

    /**
     * 重新获取数据
     *
     * @param page
     * @param pageNum
     */
    int size = 0;

    public void getConnection(int page, int pageNum) {
        HttpParams params = new HttpParams();
        params.put("page", page + "").put("pageNum", pageNum + "").put("orderby","saleDown");;
        HttpLoader.getInstance(App.context).get(RBConstants.URL_HOTPRODUCT,params, LimitResponse.class, RBConstants.REQUEST_CODE_HOTPRODUCT,this).setTag(this);
    }

    @Override
    protected void initData() {
        productList = new ArrayList<>();
        adapter = new NewproductAdapter(productList);
        lvNewproductList.setAdapter(adapter);
        lvNewproductList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Intent intent=new Intent(App.context, AppDetailActivity.class);
                intent.putExtra("sendpId",productList.get(position).id);
                Log.e("asd",productList.get(position).id+"wwww"+position);
                startActivity(intent);
            }
        });
    }

    @Override
    protected void handleUserInput() {

    }

    @Override
    protected void requestNetData() {
        HttpParams params=new HttpParams();
        params.put("page","1").put("pageNum","8").put("orderby","saleDown");
        HttpLoader.getInstance(App.context).get(RBConstants.URL_HOTPRODUCT,params, LimitResponse.class, RBConstants.REQUEST_CODE_HOTPRODUCT,this).setTag(this);

    }

    @Override
    public void onGetResponseSuccess(int requestCode, IResponse response) {
        if(requestCode == RBConstants.REQUEST_CODE_HOTPRODUCT&& response instanceof LimitResponse){
            productList.addAll(((LimitResponse) response).productList);
            adapter.notifyDataSetChanged(productList);
            //完成刷新
            refreshListView.onRefreshComplete();

        }
    }

    @Override
    public void onGetResponseError(int requestCode, VolleyError error) {

    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        App.HL.cancelRequest(this);
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = super.onCreateView(inflater, container, savedInstanceState);
        ButterKnife.inject(this, rootView);
        return rootView;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        ButterKnife.reset(this);
    }
}